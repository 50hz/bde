// bslh_hash.h                                                        -*-C++-*-
#ifndef INCLUDED_BSLH_HASH
#define INCLUDED_BSLH_HASH

#ifndef INCLUDED_BSLS_IDENT
#include <bsls_ident.h>
#endif
BSLS_IDENT("$Id: $")

//@PURPOSE: Provide a struct that can run any hashing algorithm on any type.
//
//@CLASSES:
//  bslh::Hash: hash function for fundamental types
//
//@SEE_ALSO:
//
//@DESCRIPTION: This component provides a templated struct, 'bslh::Hash', which
// provides hashing functionality and is a drop in replacement for 'bsl::hash'.
// It also contains hashAppend definitions for fundamental types, which are
// required to make the hashing algorithms in 'bslh' work. 'bslh::Hash' is a
// universal hashing algorithm that will hash any type that implements
// 'hashAppend' and will hash that type using the hashing algorithm provided as
// a template parameter.

#ifndef INCLUDED_BSLSCM_VERSION
#include <bslscm_version.h>
#endif

#ifndef INCLUDED_BSLALG_TYPETRAITBITWISECOPYABLE
#include <bslalg_typetraitbitwisecopyable.h>
#endif

#ifndef INCLUDED_BSLH_DEFAULTHASHALGORITHM
#include <bslh_defaulthashalgorithm.h>
#endif

#ifndef INCLUDED_BSLMF_ISTRIVIALLYCOPYABLE
#include <bslmf_istriviallycopyable.h>
#endif

#ifndef INCLUDED_BSLMF_ISTRIVIALLYDEFAULTCONSTRUCTIBLE
#include <bslmf_istriviallydefaultconstructible.h>
#endif

#ifndef INCLUDED_BSLS_COMPILERFEATURES
#include <bsls_compilerfeatures.h>
#endif

#ifndef INCLUDED_CSTDDEF
#include <cstddef>  // for 'std::size_t'
#define INCLUDED_CSTDDEF
#endif

namespace BloombergLP {

namespace bslh {

                          // ================
                          // class bslh::Hash
                          // ================

template <class HASHALG = bslh::DefaultHashAlgorithm>
struct Hash
{
    // Wraps hashAttributes and the parameterized 'HASHALG' in an interface
    // that is a drop in replacement for 'bsl::hash'

    typedef typename HASHALG::result_type result_type;
        // Type of the hash that will be returned.

    template <class TYPE>
    result_type operator()(TYPE const& type) const;
        // Returns a hash generated by the parameterized 'HASHALG' for the
        // specified 'type'.

};

template <class HASHALG>
template <class TYPE>
typename Hash<HASHALG>::result_type
Hash<HASHALG>::operator()(TYPE const& key) const
{
    HASHALG hashAlg;
    hashAppend(hashAlg, key);
    return hashAlg.getHash();
}

// ============================================================================
//             HASHAPPEND IMPLEMENTATIONS FOR FUNDAMENTAL TYPES
// ============================================================================

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, bool const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, signed char const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned char const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, wchar_t const input);

#if defined BSLS_COMPILERFEATURES_SUPPORT_UNICODE_CHAR_TYPES
template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char16_t const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char32_t const input);
#endif

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, short const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned short const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, int const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned int const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned long const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long long const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned long long const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, float const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, double const input);

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long double const input);
    // Passes the specified 'input' to the specified 'hashAlg'

// ============================================================================
//                  TEMPLATE AND INLINE FUNCTION DEFINITIONS
// ============================================================================

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, bool const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, signed char const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned char const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, wchar_t const input)
{
    hashAlg(&input, sizeof(input));
}

#if defined BSLS_COMPILERFEATURES_SUPPORT_UNICODE_CHAR_TYPES
template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char16_t const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, char32_t const input)
{
    hashAlg(&input, sizeof(input));
}
#endif

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, short const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned short const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, int const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned int const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned long const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long long const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, unsigned long long const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, float const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, double const input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hashAppend(HASHALG& hashAlg, long double const input)
{
    hashAlg(&input, sizeof(input));
}

}  // close namespace bslh


// ============================================================================
//                                TYPE TRAITS
// ============================================================================

// Type traits for STL 'hash'
//: o 'bsl::hash<TYPE>' is trivially default constructible.
//: o 'bsl::hash<TYPE>' is trivially copyable.
//: o 'bsl::hash<TYPE>' is bitwise movable.

namespace bslmf {
template <class TYPE>
struct IsBitwiseMoveable<bslh::Hash<TYPE> >
    : bsl::true_type {};
}  // close namespace bsl


}  // close namespace BloombergLP

namespace bsl {
template <class TYPE>
struct is_trivially_default_constructible< ::BloombergLP::bslh::Hash<TYPE> >
: bsl::true_type
{};

template <class TYPE>
struct is_trivially_copyable< ::BloombergLP::bslh::Hash<TYPE> >
: bsl::true_type
{};
}  // close namespace bsl



#endif

// ----------------------------------------------------------------------------
// Copyright (C) 2014 Bloomberg Finance L.P.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------- END-OF-FILE ----------------------------------
