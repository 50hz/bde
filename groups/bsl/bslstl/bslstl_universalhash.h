// bslstl_universalhash.h                                             -*-C++-*-
#ifndef INCLUDED_BSLSTL_UNIVERSALHASH
#define INCLUDED_BSLSTL_UNIVERSALHASH

#ifndef INCLUDED_BSLS_IDENT
#include <bsls_ident.h>
#endif
BSLS_IDENT("$Id: $")

//@PURPOSE: Provide a struct that can run any hashing algorithm on any type.
//
//@CLASSES:
//  bsl::UniversalHash: hash function for fundamental types
//
//@SEE_ALSO:
//
//@DESCRIPTION: 'bsl::UniversalHash'

#ifndef INCLUDED_BSLSCM_VERSION
#include <bslscm_version.h>
#endif

#ifndef INCLUDED_BSLALG_HASHUTIL
#include <bslalg_hashutil.h>
#endif

#ifndef INCLUDED_BSLMF_ISTRIVIALLYCOPYABLE
#include <bslmf_istriviallycopyable.h>
#endif

#ifndef INCLUDED_BSLMF_ISTRIVIALLYDEFAULTCONSTRUCTIBLE
#include <bslmf_istriviallydefaultconstructible.h>
#endif

#ifndef INCLUDED_BSLMF_ASSERT
#include <bslmf_assert.h>
#endif

#ifndef INCLUDED_BSLS_COMPILERFEATURES
#include <bsls_compilerfeatures.h>
#endif

#ifndef INCLUDED_CSTDDEF
#include <cstddef>  // for 'std::size_t'
#define INCLUDED_CSTDDEF
#endif


namespace bsl {

                          // ===========================                        TODO: Break into 3 classes
                          // class bslstl::UniversalHash
                          // ===========================

template <class HASHALG>
struct UniversalHash
{
    typedef typename HASHALG::result_type result_type;

    template <class TYPE>
    result_type operator()(TYPE const& type) const;
        // Returns a hash generated by the parameterized 'HASHALG' for the
        // specified 'type'.

};

template <class HASHALG>
template <class TYPE>
typename UniversalHash<HASHALG>::result_type
UniversalHash<HASHALG>::operator()(TYPE const& t) const
{
    HASHALG h;
    //using bsl::hash_append;                                                   TODO: This?
    hash_append(h, t);
    return static_cast<result_type>(h);
}

                          // ============================
                          // class bslstl::DefaultHashAlg
                          // ============================

class DefaultHashAlg
{
  public:
    typedef size_t result_type;

  private:
    size_t state;

  public:
    DefaultHashAlg();
        // Initialize the internal state of the algorithm

    void operator()(void const* key, size_t len);
        // Incorporates the specified 'key' of 'len' bytes into the internal
        // state of the hashing algorithm.


    result_type getHash();
        // Finalize the hash that has been accumulated and return it.

};

DefaultHashAlg::DefaultHashAlg() : state(0) { }

void DefaultHashAlg::operator()(void const* key, size_t len)
{
    unsigned char const *p = static_cast<unsigned char const *>(key);

    for (int i = 0; i < len; i++ ) {
        state += p[i];
        state += (state << 10 );
        state ^= (state >> 6  );
    }

    state += (state << 3  );
    state ^= (state >> 11 );
    state += (state << 15 );
}

DefaultHashAlg::result_type DefaultHashAlg::getHash()
{
    return state;
}

// ============================================================================
//             HASH_APPEND IMPLEMENTATIONS FOR FUNDAMENTAL TYPES
// ============================================================================

template <class HASHALG>
void hash_append(HASHALG& hashAlg, bool const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, char const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, signed char const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned char const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, wchar_t const& input);

#if defined BSLS_COMPILERFEATURES_SUPPORT_UNICODE_CHAR_TYPES
template <class HASHALG>
void hash_append(HASHALG& hashAlg, char16_t const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, char32_t const& input);
#endif

template <class HASHALG>
void hash_append(HASHALG& hashAlg, short const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned short const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, int const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned int const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned long const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long long const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned long long const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, float const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, double const& input);

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long double const& input);
    // Applies the specified 'hashAlg' to the specified 'input'

// ============================================================================
//                  TEMPLATE AND INLINE FUNCTION DEFINITIONS
// ============================================================================

template <class HASHALG>
void hash_append(HASHALG& hashAlg, bool const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, char const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, signed char const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned char const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, wchar_t const& input)
{
    hashAlg(&input, sizeof(input));
}

#if defined BSLS_COMPILERFEATURES_SUPPORT_UNICODE_CHAR_TYPES
template <class HASHALG>
void hash_append(HASHALG& hashAlg, char16_t const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, char32_t const& input)
{
    hashAlg(&input, sizeof(input));
}
#endif

template <class HASHALG>
void hash_append(HASHALG& hashAlg, short const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned short const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, int const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned int const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned long const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long long const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, unsigned long long const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, float const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, double const& input)
{
    hashAlg(&input, sizeof(input));
}

template <class HASHALG>
void hash_append(HASHALG& hashAlg, long double const& input)
{
    hashAlg(&input, sizeof(input));
}

// ============================================================================ TODO: These?
//                                TYPE TRAITS
// ============================================================================

// Type traits for STL 'hash'
//: o 'bsl::hash<TYPE>' is trivially default constructible.
//: o 'bsl::hash<TYPE>' is trivially copyable.
//: o 'bsl::hash<TYPE>' is bitwise movable.

//template <class TYPE>
//struct is_trivially_default_constructible<hash<TYPE> >
//: bsl::true_type
//{};

//template <class TYPE>
//struct is_trivially_copyable<hash<TYPE> >
//: bsl::true_type
//{};

}  // close namespace bsl

#endif

// ----------------------------------------------------------------------------
// Copyright (C) 2013 Bloomberg Finance L.P.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------- END-OF-FILE ----------------------------------
